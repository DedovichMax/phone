const express = require('express');
const QRCode = require('qrcode');
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors({
    origin: ['https://dedovichmax.github.io', 'http://localhost:3000'],
    credentials: true
}));
app.use(express.json());
app.use(express.static(path.join(__dirname, '../frontend')));

// In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
const sessions = new Map();

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
    const now = Date.now();
    let deletedCount = 0;

    for (const [sessionId, session] of sessions.entries()) {
        // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏ —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç
        if (now - session.createdAt > 30 * 60 * 1000) {
            sessions.delete(sessionId);
            deletedCount++;
        }
    }

    if (deletedCount > 0) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${deletedCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π`);
    }
}, 5 * 60 * 1000);

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
app.post('/api/generate-qr', async (req, res) => {
    try {
        const { phone } = req.body;

        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        const cleanPhone = phone.replace(/\D/g, '');

        if (!cleanPhone || cleanPhone.length < 8 || cleanPhone.length > 15) {
            return res.status(400).json({
                success: false,
                error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (8-15 —Ü–∏—Ñ—Ä)'
            });
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        const formattedPhone = `+${cleanPhone}`;

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏
        const sessionId = generateSessionId();
        const session = {
            phone: formattedPhone,
            verified: false,
            createdAt: Date.now(),
            verifiedAt: null
        };

        sessions.set(sessionId, session);
        console.log(`üì± –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è ${sessionId} –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${formattedPhone}`);

        // –î–∞–Ω–Ω—ã–µ –¥–ª—è QR-–∫–æ–¥–∞
        const qrData = JSON.stringify({
            type: 'phone_verification',
            session_id: sessionId,
            phone: formattedPhone,
            timestamp: Date.now()
        });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        const qrCode = await QRCode.toDataURL(qrData, {
            width: 400,
            margin: 2,
            color: {
                dark: '#000000',
                light: '#FFFFFF'
            }
        });

        res.json({
            success: true,
            session_id: sessionId,
            qr_code: qrCode,
            phone: formattedPhone,
            expires_in: '30 –º–∏–Ω—É—Ç'
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞'
        });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏
app.get('/api/session/:sessionId', (req, res) => {
    try {
        const { sessionId } = req.params;
        const session = sessions.get(sessionId);

        if (!session) {
            return res.status(404).json({
                success: false,
                error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞'
            });
        }

        res.json({
            success: true,
            phone: session.phone,
            verified: session.verified,
            verified_at: session.verifiedAt,
            created_at: session.createdAt
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏'
        });
    }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
app.post('/api/verify-scan', (req, res) => {
    try {
        const { session_id, scanned_phone } = req.body;

        if (!session_id || !scanned_phone) {
            return res.status(400).json({
                success: false,
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ'
            });
        }

        const session = sessions.get(session_id);

        if (!session) {
            return res.status(404).json({
                success: false,
                error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }

        if (session.verified) {
            return res.json({
                success: true,
                message: '–ù–æ–º–µ—Ä —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                phone: session.phone
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤
        if (session.phone !== scanned_phone) {
            return res.status(400).json({
                success: false,
                error: '–ù–æ–º–µ—Ä–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
            });
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session.verified = true;
        session.verifiedAt = Date.now();
        sessions.set(session_id, session);

        console.log(`‚úÖ –ù–æ–º–µ—Ä ${session.phone} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é ${session_id}`);

        res.json({
            success: true,
            message: '–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
            phone: session.phone,
            verified_at: session.verifiedAt
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞'
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.get('/api/sessions', (req, res) => {
    const now = Date.now();
    const activeSessions = [];

    for (const [sessionId, session] of sessions.entries()) {
        if (now - session.createdAt < 30 * 60 * 1000) {
            activeSessions.push({
                session_id: sessionId,
                phone: session.phone,
                verified: session.verified,
                created_at: new Date(session.createdAt).toLocaleString('ru-RU'),
                verified_at: session.verifiedAt ? new Date(session.verifiedAt).toLocaleString('ru-RU') : null,
                age_seconds: Math.round((now - session.createdAt) / 1000)
            });
        }
    }

    res.json({
        success: true,
        count: activeSessions.length,
        total_in_memory: sessions.size,
        sessions: activeSessions
    });
});

// –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/status', (req, res) => {
    res.json({
        success: true,
        status: 'üü¢ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
        uptime: Math.round(process.uptime()) + ' —Å–µ–∫',
        active_sessions: sessions.size,
        memory_usage: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + ' MB'
    });
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateSessionId() {
    return 'sess_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:${PORT}`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: http://localhost:${PORT}/api/status`);
    console.log(`üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏: http://localhost:${PORT}/api/sessions`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...');
    console.log(`üíæ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏: ${sessions.size}`);
    process.exit(0);
});